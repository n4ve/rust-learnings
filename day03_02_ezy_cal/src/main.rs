use std::io::{self, Write};

// This file is generated by CURSOR AI for Test Purposes

fn get_valid_number(prompt: &str) -> f64 {
    loop {
        print!("{}", prompt);
        io::stdout().flush().unwrap();
        
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read input");
        
        match input.trim().parse::<f64>() {
            Ok(num) => return num,
            Err(_) => println!("Invalid input! Please enter a valid number."),
        }
    }
}

fn get_valid_operator() -> char {
    loop {
        print!("Enter operator (+, -, *, /): ");
        io::stdout().flush().unwrap();
        
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read input");
        
        let operator = input.trim().chars().next().unwrap_or(' ');
        
        if "+-*/".contains(operator) {
            return operator;
        }
        println!("Invalid operator! Please enter +, -, *, or /");
    }
}

fn calculate(num1: f64, num2: f64, operator: char) -> Option<f64> {
    match operator {
        '+' => Some(num1 + num2),
        '-' => Some(num1 - num2),
        '*' => Some(num1 * num2),
        '/' => {
            if num2 == 0.0 {
                println!("Error: Division by zero!");
                None
            } else {
                Some(num1 / num2)
            }
        }
        _ => None,
    }
}

fn main() {
    println!("Welcome to Simple Calculator!");
    
    loop {
        let num1 = get_valid_number("Enter first number: ");
        let operator = get_valid_operator();
        let num2 = get_valid_number("Enter second number: ");
        
        match calculate(num1, num2, operator) {
            Some(result) => println!("Result: {} {} {} = {}", num1, operator, num2, result),
            None => println!("Calculation failed!"),
        }
        
        print!("\nDo you want to perform another calculation? (y/n): ");
        io::stdout().flush().unwrap();
        
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read input");
        
        if input.trim().to_lowercase() != "y" {
            println!("Thank you for using Simple Calculator!");
            break;
        }
        println!();
    }
}
